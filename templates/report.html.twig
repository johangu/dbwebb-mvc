
{% extends "base.html.twig" %}

{% block title %}About the Author{% endblock %}

{% block body %}

    <h1>Report</h1>
    <div class="content">
			<aside>
				<nav class="side-nav">
					<a href="{{ path('report')}}#kmom01">kmom01</a>
					<a href="{{ path('report')}}#kmom02">kmom02</a>
					<a href="{{ path('report')}}#kmom03">kmom03</a>
					<a href="{{ path('report')}}#kmom04">kmom04</a>
					<a href="{{ path('report')}}#kmom05">kmom05</a>
					<a href="{{ path('report')}}#kmom06">kmom06</a>
				</nav>
			</aside>
			<div>
				<div id="kmom01">
					<h2>kmom01</h2>
					<p>
					Som vi vet från tidigare kurser har jag ganska bred erfarenhet av programmering i allmänhet, och har sysslat en hel del med objektorientering även om jag senaste 10 åren mest jobbat med backends på serverless och då inte rört så mycket vid just OOP.
					</p>

					<p>
					Klasser kan man se som en mall för hur ett objekt ser ut, och sen "bygger" man objekt genom att instantiera en klass med dess constructor. Detta hjälper en att kunna ha flera objekt som har samma egenskaper utan att behöva skriva kod för vart och ett av dem. Denna "mall" kan innehålla variabler och metoder och kan specificera om dessa är publikt tillgängliga, eller privata. Därutöver kan de även vara "protected" om sub-klasser ska kunna använda dem. Sub-klasser och arv behöver vi inte riktigt komma in på än, för att kunna skapa de första klasserna, så jag går inte in mer där just nu. Ett instantierat objekt kan ha ett state, om något har skett med det och detta påverkar inga andra objekt av samma klass eftersom de trots att de skapats med samma mall har olika interna states.
					</p>

					<p>
					Det är lite rörigt med kodbasen för mig eftersom den skiljer sig mycket från hur mina "vanliga" kodbaser ser ut. Det är mycket att hålla reda på med MVC jämfört med bara API:er och backend-services. Och att dessutom använda Composer samt npm känns lite rörigt för min del men jag ser absolut nyttan med det hela. Ska bli spännande att vänja sig lite och förstå mer runt Symfony.
					</p>

					<p>
					I "PHP The Right Way" tyckte jag att det var intressant att läsa lite om Composer, eftersom det är så länge sen jag använde PHP sist, och på den tiden var det PEAR som gällde. Dessutom fann jag biten om exceptions och errors och hur PHP inte direkt använder exceptions som jag är van från Python och nodejs vilket jag nog kommer att behöva påminna mig själv om genom kursens gång.
					</p>

					<p>
					TIL detta moment för mig är allt runt composer och Symfony, då jag aldrig arbetat med varken det ena eller det andra tidigare. Kul att lära sig nya verktyg.
					</p>
				</div>
				<div id="kmom02">
					<h2>kmom02</h2>
					<p>
					Arv i OOP innebär ett s.k. "är-en"-förhållande, där en subklass är garanterat att dela en viss typ av egenskaper med en superklass. I fallet i detta kmom har jag det representerat genom kortlekar, där jag har en abstrakt superklass Deck som innehåller all logik jag kunde tänka mig att kortlekar generellt delar, samt en StandardDeck som är en subklass till Deck, som representerar en vanlig kortlek med 52 kort. Genom arvet här kan vi säga att StandardDeck är-en Deck, dvs att den har alla Deck-egenskaper och utökat med några av sina egna egenskaper (de 52 spelkorten).
					</p>
					Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.
					<p>
					Komposition innebär "har-en"-förhållande, till skillnad från arvets "är-en", där ett objekt har andra objekt i sitt interna state, än en gång representerat i detta kmom genom kortleken. En Deck har Cards, dvs att det finns i standardkortlekens fall 52 objekt av typen Card i ett nytt instantierats StandardDeck-objekt (när vi drar kort och händer kommer antalet variera). Kortleken består (is composed by/har-en-eller-flera) kort.
					</p>

					<p>
					Interface kan vi se som ett kontrakt om något som klassen måste innehålla. Dvs alla metoder som finns i ett interface MÅSTE vara implementerade i klassen, detta kan vi använda för att göra vår kod mer flexibel där våra klasser som implementerar interfacet garanterar att metoderna finns, men deras implementation kan se olika ut. T.ex. skulle jag kunnat ha ett DeckInterface med ett par metoder istället för en superklass, och låta alla kortlekar som implementerar interfacet hantera sin interna logik för de definerade metoderna. T.ex. shuffle kunde vara en bra metod att hantera på detta sätt, så den nu ligger i abstrakta superklassen och utgår från att alla kortlekar kan blandas, men vem vet, kanske har vi en kortlek som inte får blandas eller att kortlekar blandas på olika sätt? Där vore ett interface fint att nyttja, och låta de kortlekar som kan blandas implementera ShuffleInterface med sina egna blandningsalgoritmer.
					</p>

					<p>
					Traits är ett sätt vi kan dela kod på utan att använda arv. Bara för att flera saker kan dela någon typ av logik betyder det inte nödvändigtvis att de har ett "är-en"-förhållande. Om vi fortsätter exemplet från interface-förklaringen med shuffle, och vi utgår från att alla kortlekar som kan blandas faktiskt blandas på samma sätt, då skulle vi kunna ha ett trait Shufflable med metoden shuffle() och låta alla dessa kortlekar ha traited Shufflable för att slippa duplicera samma logik i alla kortlekar som kan blandas. Vi skulle givetvis kunna ha traits med olika sätt att blanda också och låta olika kortlekar använda olika traits. ProfessionallyShufflable, CutShufflable, TripleShufflable osv skulle vi kunna tänka oss då.
					</p>

					<p>
					Jag implementerade uppgiften med en abstrakt klass för kortlekar, och en subklass som ärver därifrån vilken representerar en standardkortlek. Därutöver har jag ett klass för kort och en klass för en hand med kort. Standardkortleken har en komposition av 52 spelkort som skapas när konstruktorn kallas. En hand med kort är även den en kompisition, och tar ett argument av en kortlek samt antal kort den ska dra från kortleken. Alla klasserna implementerar JsonSerializer och har en jsonSerialize-funktion för att enkelt kunna serialiseras och presenteras i /api-routes. Jag är generellt nöjd med implementationen, känner att mina klasser har bra uppbygnad och enkapsulering. Funderar dock om vissa delar av Deck bör flyttas ut från abstrakta superklassen till interfaces och traits framöver. Tror även att jag kan hitta en bättre struktur för templates kanske.<br>
					Jag är dessutom inte helt säker på att jag är nöjd med min namnrymd och kan komma att uppdatera och förfina där i framtida kmom.
					</p>

					<p>
					Det är absolut en stor skillnad att använda symfony år 2025, än det var att använda gamla ramverk 15 år tidigare, det känns stabilare och tydligare vad jag jobbar med. Det kanske iofs kan bero på mer erfarenhet också, men det låter vi vara osagt. Jag kan fortfarande känna att PHP är lite tungt att rodda i jämförelse med t.ex. Ruby eller Python (RoR och Flask som jämförelse mot Symfony), men jag värmer upp mer och mer.
					</p>

					<p>
					Det har varit mycket Symfony-dokumentation för min del denna gång, och TIL har varit kring struktur, best practices, routes med parametrar (och defaults) denna gång.
					</p>
				</div>
				<div id="kmom03">
					<h2>kmom03</h2>
					<p>
					</p>
				</div>
				<div id="kmom04">
					<h2>kmom04</h2>
					<p>
					</p>
				</div>
				<div id="kmom05">
					<h2>kmom05</h2>
					<p>
					</p>
				</div>
				<div id="kmom06">
					<h2>kmom06</h2>
					<p>
					</p>
				</div>
			</div>
		</div>

{% endblock %}
